// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
	models "test/internal/domain/entity"
)

// MockAuthor is a mock of Author interface.
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor.
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance.
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthor) CreateAuthor(autor models.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", autor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorMockRecorder) CreateAuthor(autor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthor)(nil).CreateAuthor), autor)
}

// DeleteAuthor mocks base method.
func (m *MockAuthor) DeleteAuthor(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorMockRecorder) DeleteAuthor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthor)(nil).DeleteAuthor), id)
}

// GetAuthorBooks mocks base method.
func (m *MockAuthor) GetAuthorBooks(authorID int) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorBooks", authorID)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorBooks indicates an expected call of GetAuthorBooks.
func (mr *MockAuthorMockRecorder) GetAuthorBooks(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorBooks", reflect.TypeOf((*MockAuthor)(nil).GetAuthorBooks), authorID)
}

// GetAuthorById mocks base method.
func (m *MockAuthor) GetAuthorById(ctx context.Context, id int) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorById", ctx, id)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorById indicates an expected call of GetAuthorById.
func (mr *MockAuthorMockRecorder) GetAuthorById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorById", reflect.TypeOf((*MockAuthor)(nil).GetAuthorById), ctx, id)
}

// GetAuthors mocks base method.
func (m *MockAuthor) GetAuthors() ([]models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthors")
	ret0, _ := ret[0].([]models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthors indicates an expected call of GetAuthors.
func (mr *MockAuthorMockRecorder) GetAuthors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthors", reflect.TypeOf((*MockAuthor)(nil).GetAuthors))
}

// UpdateAuthor mocks base method.
func (m *MockAuthor) UpdateAuthor(author models.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", author)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorMockRecorder) UpdateAuthor(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthor)(nil).UpdateAuthor), author)
}

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBook) CreateBook(book models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookMockRecorder) CreateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBook)(nil).CreateBook), book)
}

// DeleteBook mocks base method.
func (m *MockBook) DeleteBook(authorID, bookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", authorID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookMockRecorder) DeleteBook(authorID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBook)(nil).DeleteBook), authorID, bookID)
}

// GetBookById mocks base method.
func (m *MockBook) GetBookById(id int) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockBookMockRecorder) GetBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockBook)(nil).GetBookById), id)
}

// UpdateBook mocks base method.
func (m *MockBook) UpdateBook(book models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookMockRecorder) UpdateBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBook)(nil).UpdateBook), book)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// CreateReader mocks base method.
func (m *MockReader) CreateReader(reader models.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReader", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReader indicates an expected call of CreateReader.
func (mr *MockReaderMockRecorder) CreateReader(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReader", reflect.TypeOf((*MockReader)(nil).CreateReader), reader)
}

// DeleteReader mocks base method.
func (m *MockReader) DeleteReader(readerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReader", readerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReader indicates an expected call of DeleteReader.
func (mr *MockReaderMockRecorder) DeleteReader(readerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReader", reflect.TypeOf((*MockReader)(nil).DeleteReader), readerID)
}

// GetReaderBookList mocks base method.
func (m *MockReader) GetReaderBookList(readerId int) ([]models.ReaderBookList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReaderBookList", readerId)
	ret0, _ := ret[0].([]models.ReaderBookList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReaderBookList indicates an expected call of GetReaderBookList.
func (mr *MockReaderMockRecorder) GetReaderBookList(readerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReaderBookList", reflect.TypeOf((*MockReader)(nil).GetReaderBookList), readerId)
}

// GetReaderById mocks base method.
func (m *MockReader) GetReaderById(id int) (models.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReaderById", id)
	ret0, _ := ret[0].(models.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReaderById indicates an expected call of GetReaderById.
func (mr *MockReaderMockRecorder) GetReaderById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReaderById", reflect.TypeOf((*MockReader)(nil).GetReaderById), id)
}

// TakeBook mocks base method.
func (m *MockReader) TakeBook(readerId, bookId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeBook", readerId, bookId)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeBook indicates an expected call of TakeBook.
func (mr *MockReaderMockRecorder) TakeBook(readerId, bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeBook", reflect.TypeOf((*MockReader)(nil).TakeBook), readerId, bookId)
}

// UpdateReader mocks base method.
func (m *MockReader) UpdateReader(reader models.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReader", reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReader indicates an expected call of UpdateReader.
func (mr *MockReaderMockRecorder) UpdateReader(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReader", reflect.TypeOf((*MockReader)(nil).UpdateReader), reader)
}
